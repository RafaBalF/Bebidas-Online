// ignore_for_file: prefer_const_constructors

import 'dart:convert';

import 'package:flutter/material.dart';
import 'package:mobx/mobx.dart';
import 'package:ped/model/login_model.dart';
import 'package:http/http.dart' as http;
import 'package:shared_preferences/shared_preferences.dart';

import '../pedido/pedido_page.dart';

part 'login_store.g.dart';

class LoginStore = _LoginStoreBase with _$LoginStore;

abstract class _LoginStoreBase with Store {
  var client = Client();

  @observable
  String? idPdvObs;

  @action
  changeIdPdvObs(String? value) => idPdvObs = value;

  @computed
  bool get isValid {
    return validateLogin() == null && validateSenha() == null;
  }

  String? validateLogin() {
    if (client.login == '' || client.login.isEmpty) {
      return "Por favor insira seu login";
    } else if (client.login.length < 6) {
      return "seu login precisa ter mais de 5 caracteres";
    }
    return null;
  }

  String? validateSenha() {
    if (client.senha == '' || client.senha.isEmpty) {
      return "Por favor insira sua senha";
    } else if (client.senha.length < 6) {
      return "sua senha precisa ter mais de 5 caracteres";
    }
    return null;
  }

  onCLick(context) async {
    var loginAuth = await login(client.login, client.senha);

    final prefs = await SharedPreferences.getInstance();
    await prefs.setString('idPdv', loginAuth.idPdv.toString());

    if (loginAuth.status == "200") {
      Navigator.push(
        context,
        MaterialPageRoute(
          builder: (context) => PedidoPage(title: 'Pedidos'),
        ),
      );
    } else {
      showDialog(
        context: context,
        builder: (_) {
          return AlertDialog(
            title: Text('Atenção'),
            content: Text('Login Invalido'),
          );
        },
      );
    }
  }

  Future<LoginAutogenerated> login(String login, String senha) async {
    var request = http.MultipartRequest(
        'POST',
        Uri.parse(
            'https://leonardopolo.com.br/casca-api/bebidasonline-login.php'));
    request.fields.addAll({'usuario': login, 'senha': senha});

    http.StreamedResponse response = await request.send();
    var dados = jsonDecode(await response.stream.bytesToString());

    var data = LoginAutogenerated.fromJson(dados);

    return data;
  }
}

class LoginAutogenerated {
  String? status;
  String? mensagem;
  String? idPdv;

  LoginAutogenerated({this.status, this.mensagem, this.idPdv});

  LoginAutogenerated.fromJson(Map<String, dynamic> json) {
    status = json['status'];
    mensagem = json['mensagem'];
    idPdv = json['id_pdv'];
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['status'] = this.status;
    data['mensagem'] = this.mensagem;
    data['id_pdv'] = this.idPdv;
    return data;
  }
}
